<?php

namespace BudgetBundle\Repository;

use AppBundle\Entity\Office;
use BudgetBundle\Entity\BudgetIncomeSummary;
use BudgetBundle\Entity\BudgetIncomeSummaryDetail;

/**
 * BudgetSummaryDetailsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BudgetIncomeSummaryDetailRepository extends \Doctrine\ORM\EntityRepository
{
    public function updateRequestAmount($data)
    {
        foreach ($data as $key => $amount) {
            /** @var BudgetIncomeSummaryDetail $bd */
            $bd = $this->find($key);

            if (!$bd) {
                continue;
            }

            $bd->setRequestAmount((float)$amount['current']);
            $bd->setAmount((float)$amount['current']);
            $bd->setAmendmentRequestAmount((float)$amount['current']);
            $bd->setNextYearProjectionAmount((float)$amount['next']);
            $bd->setAfterNextYearProjectionAmount((float)$amount['after-next']);
            $this->_em->flush();
        }
    }

    public function updateAmount($data)
    {
        foreach ($data as $key => $amount) {
            /** @var BudgetIncomeSummaryDetail $bd */
            $bd = $this->find($key);

            if (!$bd) {
                continue;
            }
            $bd->setAmount((float)$amount);
            $bd->setAmendmentRequestAmount($bd->getAmount());
            $this->_em->flush();
        }
    }

    public function updateAmendmentRequestAmount($data)
    {
        foreach ($data as $key => $amount) {
            /** @var BudgetIncomeSummaryDetail $bd */
            $bd = $this->find($key);

            if (!$bd) {
                continue;
            }
            $bd->setAmendmentRequestAmount((float)$amount);
            $this->_em->flush();
        }
    }

    /**
     * @param BudgetIncomeSummary|mixed $budget
     * @return array
     */
    public function getBudgetSummaryAmount($budget)
    {
        $data = [];
        if (!$budget) return $data;

        /** @var BudgetIncomeSummaryDetail $budgetDetail */
        foreach ($budget->getBudgetSummaryDetails() as $budgetDetail) {
            $data[$budgetDetail->getBudgetHead()->getId()] = [
                'id'                            => $budgetDetail->getId(),
                'requestAmount'                 => $budgetDetail->getRequestAmount(),
                'amount'                        => $budgetDetail->getAmount(),
                'nextYearProjectionAmount'      => $budgetDetail->getNextYearProjectionAmount(),
                'afterNextYearProjectionAmount' => $budgetDetail->getAfterNextYearProjectionAmount(),
                'amendmentRequestAmount'        => $budgetDetail->getAmendmentRequestAmount(),
            ];
        }

        return $data;
    }

    public function getBudgetSummaryAmountByYear($year)
    {
        $budget = $this->_em->getRepository('BudgetBundle:BudgetIncomeSummary')->getBudgetSummaryByYear($year);

        if (!$budget) {
            return ['data' => [], 'total' => ['requestAmount' => 0, 'amount' => 0]];
        }

        return $this->getBudgetSummaryAmountWithTotal($budget);
    }

    public function getBudgetSummaryAmountWithTotal($budget)
    {
        return [
            'data' => $this->getBudgetSummaryAmount($budget),
            'total' => $this->getTotalAmount($budget->getId()),
        ];
    }

    public function getTotalAmount($budgetId)
    {
        $qb = $this->createQueryBuilder('bd');

        $qb->select("SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) amount, SUM(bd.amendmentRequestAmount) as amendmentRequestAmount");
        $qb->join('bd.budgetSummary', 'budget');
        $qb->where($qb->expr()->eq('budget.id', $budgetId));
        $qb->groupBy('budget.id');

        return $qb->getQuery()->getSingleResult();
    }

    public function getAmounts($year, $status = null)
    {
        $qb = $this->createQueryBuilder('bd');

        $qb->select("budgetHead.id as headId, bd.requestAmount as requestAmount, bd.amount as amount, bd.amendmentRequestAmount as amendmentRequestAmount, bd.nextYearProjectionAmount as nextYearProjectionAmount, bd.afterNextYearProjectionAmount as afterNextYearProjectionAmount");
        $qb->join('bd.budgetSummary', 'budget');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->where($qb->expr()->eq('budget.financialYear', $year));

        if ($status) {
            $qb->andWhere("budget.{$status} = 'approved'");
        }

        $data = [];
        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['headId']] = $row;
        }

        return $data;
    }

    public function getTotalAmountParentHeadWise($year, $status = null)
    {
        $qb = $this->createQueryBuilder('bd');

        $qb->select("parent.id, SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) amount, SUM(bd.amendmentRequestAmount) as amendmentRequestAmount, SUM(bd.nextYearProjectionAmount) as nextYearProjectionAmount, SUM(bd.afterNextYearProjectionAmount) as afterNextYearProjectionAmount");
        $qb->join('bd.budgetSummary', 'budget');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->join('budgetHead.parent', 'parent');
        $qb->where($qb->expr()->eq('budget.financialYear', $year));
        $qb->groupBy('parent.id');

        if ($status) {
            $qb->andWhere("budget.{$status} = 'approved'");
        }

        $data = [];
        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row;
        }

        return $data;
    }

    public function getTotalAmountOfYear($year, $status = null)
    {
        $qb = $this->createQueryBuilder('bd');

        $qb->select("SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) amount, SUM(bd.amendmentRequestAmount) as amendmentRequestAmount, SUM(bd.nextYearProjectionAmount) as nextYearProjectionAmount, SUM(bd.afterNextYearProjectionAmount) as afterNextYearProjectionAmount");
        $qb->join('bd.budgetSummary', 'budget');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->join('budgetHead.parent', 'parent');
        $qb->where($qb->expr()->eq('budget.financialYear', $year));

        if ($status) {
            $qb->andWhere("budget.{$status} = 'approved'");
        }

        return $qb->getQuery()->getResult()[0];
    }

    public function getAllHeadTotal($financialYear = null, Office $office = null, $duration = null)
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select('budgetHead.id, SUM(bd.amount) totalAmount');
        $qb->join('bd.budgetSummary', 'budget');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->where("budget.budgetStatus = 'approved'");

        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budget.financialYear', ':financialYear'));
            $qb->setParameter('financialYear', $financialYear);
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('budget.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('budget.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $qb->groupBy('budgetHead.id');

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row['totalAmount'];
        }

        return $data;
    }

    public function getAllParentHeadTotal($financialYear = null, $duration = null, $grandTotal = false, $office=null)
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select('SUM(bd.amount) totalAmount');
        $qb->join('bd.budgetSummary', 'budget');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->join('budgetHead.parent', 'parentBudgetHead');
        $qb->where("budget.budgetStatus = 'approved'");

        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budget.financialYear', ':financialYear'));
            $qb->setParameter('financialYear', $financialYear);
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('budget.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('budget.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $data = [];
        if (!$grandTotal) {
            $qb->addSelect('parentBudgetHead.id');
            $qb->groupBy('parentBudgetHead.id');

            foreach ($qb->getQuery()->getResult() as $row) {
                $data[$row['id']] = $row['totalAmount'];
            }
        } else {
            $row = $qb->getQuery()->getOneOrNullResult();
            $data = $row ? $row['totalAmount'] : 0;
        }

        return $data;
    }
}