<?php

namespace BudgetBundle\Repository;

use AppBundle\Entity\FinancialYear;
use AppBundle\Entity\Office;
use AppBundle\Utility\DateUtil;
use BudgetBundle\Entity\BudgetExpenseSanction;
use BudgetBundle\Entity\BudgetHead;
use Doctrine\ORM\EntityRepository;

/**
 * BudgetExpenseSanctionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BudgetExpenseSanctionRepository extends EntityRepository
{
    public function save(BudgetExpenseSanction $budgetExpense)
    {
        //$budgetExpense->calculateTotalAmount();
        $this->_em->persist($budgetExpense);
        $this->_em->flush();
    }

    public function getHeadTotal(BudgetHead $budgetHead, $financialYear = null, Office $office = null)
    {
        $qb = $this->createQueryBuilder('expenseSanction');
        $qb->select('SUM(expenseSanction.totalAmount) as totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');

        $qb->where($qb->expr()->eq('budgetHead.id', ':budgetHead'));
        $qb->setParameter('budgetHead', $budgetHead);

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($office) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.office', ':office'));
            $qb->setParameter('office', $office);
        }
        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        $qb->groupBy('budgetHead.id');

        if ($row = $qb->getQuery()->getOneOrNullResult()) {
            return $row['totalAmount'];
        }

        return 0;
    }

    public function getTotalExpenseOfHead(BudgetHead $budgetHead, FinancialYear $financialYear, Office $office = null)
    {
        $qb = $this->createQueryBuilder('budgetExpenseSanction');

        $qb->join('budgetExpenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('budgetExpense.financialYear', 'financialYear');
        $qb->select('SUM(budgetExpenseSanction.totalAmount) AS amount');
        $qb->where($qb->expr()->eq('budgetExpense.budgetHead', $budgetHead->getId()));
        $qb->andWhere($qb->expr()->eq('budgetExpenseSanction.status', ':approved'));
        $qb->andWhere($qb->expr()->eq('financialYear', $financialYear->getId()));
        $qb->setParameter('approved', 'approved');

        $qb->groupBy('budgetExpense.budgetHead');
        if ($office) {
            $qb->addGroupBy('budgetExpense.office');
            $qb->andWhere($qb->expr()->eq('budgetExpense.office', $office->getId()));
        }

        if ($result = $qb->getQuery()->getOneOrNullResult()) {
            return (float)$result['amount'];
        }

        return 0;
    }

    public function getAllHeadTotal($financialYear = null, Office $office = null, $duration = null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');
        $qb->select('budgetHead.id, SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($office) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.office', ':office'));
            $qb->setParameter('office', $office);
        }
        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('expenseSanction.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('expenseSanction.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $qb->groupBy('budgetHead.id');

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row['totalAmount'];
        }

        return $data;
    }

    public function getAllHeadAllTotal($financialYear = null, Office $office = null, $duration = null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');
        $qb->select('budgetHead.id, SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($office) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.office', ':office'));
            $qb->setParameter('office', $office);
        }
        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if (!empty($duration)) {
            if (isset($duration['end'])) {
                $qb->andWhere('expenseSanction.createdAt <= :endDate');
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $qb->groupBy('budgetHead.id');

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row['totalAmount'];
        }

        return $data;
    }

    public function getAllWithOutHQHeadTotal($financialYear = null, Office $office = null, $duration = null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');
        $qb->select('budgetHead.id, SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($office) {
            $qb->andWhere($qb->expr()->neq('budgetExpense.office', ':office'));
            $qb->setParameter('office', $office);
        }
        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('expenseSanction.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('expenseSanction.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $qb->groupBy('budgetHead.id');

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row['totalAmount'];
        }

        return $data;
    }

    public function getAllParentHeadTotal($financialYear = null, $duration = null, $grandTotal = false, $office=null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');

        $qb->select('SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('expenseSanction.office', 'office');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');
        $qb->join('budgetHead.parent', 'parentBudgetHead');

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if ($office) {
            $qb->andWhere($qb->expr()->eq('office', ':office'));
            $qb->setParameter('office', $office);
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('expenseSanction.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('expenseSanction.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $data = [];
        if (!$grandTotal) {
            $qb->addSelect('parentBudgetHead.id');
            $qb->groupBy('parentBudgetHead.id');

            foreach ($qb->getQuery()->getResult() as $row) {
                $data[$row['id']] = $row['totalAmount'];
            }
        } else {
            $row = $qb->getQuery()->getOneOrNullResult();
            $data = $row ? $row['totalAmount'] : 0;
        }

        return $data;
    }

    public function getAllParentHeadAllTotal($financialYear = null, $duration = null, $grandTotal = false, $office=null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');

        $qb->select('SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('expenseSanction.office', 'office');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');
        $qb->join('budgetHead.parent', 'parentBudgetHead');

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if ($office) {
            $qb->andWhere($qb->expr()->eq('office', ':office'));
            $qb->setParameter('office', $office);
        }

        if (!empty($duration)) {
            if (isset($duration['end'])) {
                $qb->andWhere('expenseSanction.createdAt <= :endDate');
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $data = [];
        if (!$grandTotal) {
            $qb->addSelect('parentBudgetHead.id');
            $qb->groupBy('parentBudgetHead.id');

            foreach ($qb->getQuery()->getResult() as $row) {
                $data[$row['id']] = $row['totalAmount'];
            }
        } else {
            $row = $qb->getQuery()->getOneOrNullResult();
            $data = $row ? $row['totalAmount'] : 0;
        }

        return $data;
    }

    public function getAllWithOutParentHeadTotal($financialYear = null, $duration = null, $grandTotal = false, $office=null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');

        $qb->select('SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('expenseSanction.office', 'office');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');
        $qb->join('budgetHead.parent', 'parentBudgetHead');

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.financialYear', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if ($office) {
            $qb->andWhere($qb->expr()->neq('office', ':office'));
            $qb->setParameter('office', $office);
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('expenseSanction.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('expenseSanction.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        $data = [];
        if (!$grandTotal) {
            $qb->addSelect('parentBudgetHead.id');
            $qb->groupBy('parentBudgetHead.id');

            foreach ($qb->getQuery()->getResult() as $row) {
                $data[$row['id']] = $row['totalAmount'];
            }
        } else {
            $row = $qb->getQuery()->getOneOrNullResult();
            $data = $row ? $row['totalAmount'] : 0;
        }

        return $data;
    }

    public function getOfficeWiseExpenses($financialYear, $headType = null, $duration = [], $office = null)
    {
        $qb = $this->createQueryBuilder('expenseSanction', 'expenseSanction.id');

        $qb->select('office.id as officeId, SUM(expenseSanction.totalAmount) totalAmount');
        $qb->join('expenseSanction.budgetExpense', 'budgetExpense');
        $qb->join('budgetExpense.office', 'office');
        $qb->join('budgetExpense.budgetHead', 'budgetHead');
        $qb->addGroupBy('office.id');

        $qb->where($qb->expr()->eq('budgetExpense.financialYear', $financialYear));

        $qb->andWhere($qb->expr()->eq('expenseSanction.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($headType == 'parent') {
            $qb->join('budgetHead.parent', 'parentHead');
            $qb->addSelect('parentHead.id as headId');
            $qb->addGroupBy('parentHead.id');
        } else if ($headType == 'child'){
            $qb->addSelect('budgetHead.id as headId');
            $qb->addGroupBy('budgetHead.id');
        }

        if (!empty($duration)) {
            if (isset($duration['start'])) {
                $qb->andWhere($qb->expr()->gt('expenseSanction.createdAt', ':startDate'));
                $qb->setParameter('startDate', $duration['start']);
            }

            if (isset($duration['end'])) {
                $qb->andWhere($qb->expr()->lt('expenseSanction.createdAt', ':endDate'));
                $qb->setParameter('endDate', $duration['end']);
            }
        }

        if ($office) {
            $qb->andWhere($qb->expr()->eq('budgetExpense.office', ':office'));
            $qb->setParameter('office', $office);
        }

        $data = [];
        foreach ($qb->getQuery()->getResult() as $row) {
            if ($headType) {
                if (!isset($data[$row['officeId']][$row['headId']])) {
                    $data[$row['officeId']][$row['headId']] = 0;
                }
                $data[$row['officeId']][$row['headId']] += (float)$row['totalAmount'];
            } else {
                if (!isset($data[$row['officeId']])) {
                    $data[$row['officeId']] = 0;
                }
                $data[$row['officeId']] += (float)$row['totalAmount'];
            }
        }

        return $data;
    }
}
