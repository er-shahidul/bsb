<?php

namespace BudgetBundle\Repository;

use AppBundle\Entity\FinancialYear;
use AppBundle\Entity\Office;
use BudgetBundle\Entity\Budget;
use BudgetBundle\Entity\BudgetDetail;
use BudgetBundle\Entity\BudgetHead;

/**
 * BudgetDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BudgetDetailRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Budget|mixed $budget
     * @return array
     */
    public function getBudgetAmount($budget)
    {
        $data = [];
        if (!$budget) return $data;

        $budgetDetails = $budget->getBudgetDetails();

        /** @var BudgetDetail $budgetDetail */
        foreach ($budgetDetails as $budgetDetail) {
            $data[$budgetDetail->getBudgetHead()->getId()] = ['id' => $budgetDetail->getId(), 'requestAmount' => $budgetDetail->getRequestAmount(), 'amount' => $budgetDetail->getAmount(), 'remark' => $budgetDetail->getRemark()];
        }

        return $data;
    }

    public function getBudgetAmountByYear($year, $office)
    {
        $budget = $this->_em->getRepository('BudgetBundle:Budget')->getBudgetByYear($year, $office);

        if (!$budget) {
            return ['data' => [], 'total' => ['requestAmount' => 0, 'amount' => 0]];
        }

        return [
            'data' => $this->getBudgetAmount($budget),
            'total' => $this->getTotalAmount($budget->getId()),
        ];
    }

    public function updateRequestAmount($amountData, $remarkData)
    {
        foreach ($amountData as $key => $amount) {
            /** @var BudgetDetail $bd */
            $bd = $this->find($key);

            if (!$bd) {
                continue;
            }

            $bd->setRequestAmount((float)$amount);
            $bd->setRemark($remarkData[$key]);
            $this->_em->flush();
        }
    }

    public function updateAmount($data)
    {
        foreach ($data as $key => $amount) {
            /** @var BudgetDetail $bd */
            $bd = $this->find($key);

            if (!$bd) {
                continue;
            }

            $bd->setAmount((float)$amount);
            $this->_em->flush();
        }
    }

    public function getTotalAmount($budgetId)
    {
        $qb = $this->createQueryBuilder('bd');

        $qb->select("SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) amount");
        $qb->join('bd.budget', 'budget');
        $qb->where($qb->expr()->eq('budget.id', $budgetId));
        $qb->groupBy('budget.id');
        $result = $qb->getQuery()->getOneOrNullResult();

        if (!$result) {
            return [
                'requestAmount' => 0,
                'amount'        => 0
            ];
        }

        return $result;
    }

    /**
     * @param int $year
     * @return array
     */
    public function getAllBudgetAmountByYear($year)
    {
        $data = [];
        $headTotal = [];

        foreach ($this->_em->getRepository('AppBundle:Office')->findAll() as $office) {
            /** @var Budget $budget */
            $budget = $this->_em->getRepository('BudgetBundle:Budget')->getBudgetByYear($year, $office);

            if (!$budget) {
                continue;
            }

            /** @var BudgetDetail $budgetDetail */
            foreach ($budget->getBudgetDetails() as $budgetDetail) {
                $data['data'][$office->getId()]['data'][$budgetDetail->getBudgetHead()->getId()] = ['id' => $budgetDetail->getId(), 'requestAmount' => $budgetDetail->getRequestAmount(), 'amount' => $budgetDetail->getAmount(), 'remark'=> $budgetDetail->getRemark()];

                $this->_prepareBudgetHeadTotal($headTotal, $budgetDetail);
            }
        }

        $this->_prepareBudgetOfficeTotal($data['data']);
        $data['total'] = $headTotal;
        $data['grandTotal']['requestAmount'] = array_sum(array_column($headTotal, 'requestAmount'));
        $data['grandTotal']['amount'] = array_sum(array_column($headTotal, 'amount'));;

        return $data;
    }

    protected function _prepareBudgetOfficeTotal(&$data)
    {
        foreach ($data as $officeId => $officeData) {
            $data[$officeId]['total']['requestAmount'] = array_sum(array_column($officeData['data'], 'requestAmount'));
            $data[$officeId]['total']['amount'] = array_sum(array_column($officeData['data'], 'amount'));
        }
    }

    protected function _prepareBudgetHeadTotal(&$data, BudgetDetail $budgetDetail)
    {
        $budgetHeadId = $budgetDetail->getBudgetHead()->getId();

        $data[$budgetHeadId]['requestAmount'] = isset($data[$budgetHeadId]['requestAmount']) ? $data[$budgetHeadId]['requestAmount'] + $budgetDetail->getRequestAmount() : $budgetDetail->getRequestAmount();
        $data[$budgetHeadId]['amount'] = isset($data[$budgetHeadId]['amount']) ? $data[$budgetHeadId]['amount'] + $budgetDetail->getAmount() : $budgetDetail->getAmount();
    }

    public function getBudgetAmountOfHead(Budget $budget, BudgetHead $budgetHead)
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select("SUM(bd.amount) amount");
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->join('bd.budget', 'budget');
        $qb->join('budget.office', 'office');
        $qb->join('budget.financialYear', 'financialYear');
        $qb->andWhere($qb->expr()->eq('financialYear', $budget->getFinancialYear()->getId()));
        $qb->andWhere($qb->expr()->eq('budgetHead', $budgetHead->getId()));
        $qb->andWhere($qb->expr()->eq('budget.status', "'approved'"));
        $qb->andWhere($qb->expr()->eq('office', $budget->getOffice()->getId()));
        $qb->groupBy('budgetHead.id');

        if ($row = $qb->getQuery()->getOneOrNullResult()) {
            return Budget::decodeAmount($row['amount']);
        }

        return 0;
    }

    public function getBudgetAmountOfAllHeadByFinancialYear(FinancialYear $financialYear)
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select("budgetHead.id, SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) amount");
        $qb->join('bd.budget', 'budget');
        $qb->join('budget.financialYear', 'financialYear');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->where($qb->expr()->eq('financialYear.id', $financialYear->getId()));
        $qb->groupBy('budgetHead.id');

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row;
        }

        return $data;
    }

    public function getBudgetHeadSummary(BudgetHead $budgetHead, Office $office = null)
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select("financialYear.id as financialYearName, bd.requestAmount, bd.amount");
        $qb->join('bd.budget', 'budget');
        $qb->join('budget.financialYear', 'financialYear');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->where($qb->expr()->eq('budgetHead.id', ':budgetHead'));
        $qb->setParameter('budgetHead', $budgetHead);
        if ($office) {
            $qb->andWhere($qb->expr()->eq('budget.office', ':office'));
            $qb->setParameter('office', $office);
        }

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['financialYearName']] = $row;
        }

        return $data;
    }

    public function getHeadTotal(BudgetHead $budgetHead, $financialYear = null, Office $office = null, $type = ['new', 'fund-request'])
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select("budgetHead.id, SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) amount");
        $qb->join('bd.budget', 'budget');
        $qb->join('budget.financialYear', 'financialYear');
        $qb->join('bd.budgetHead', 'budgetHead');

        $qb->where($qb->expr()->eq('budgetHead.id', ':budgetHead'));
        $qb->setParameter('budgetHead', $budgetHead);

        $qb->andWhere($qb->expr()->eq('budget.status', ':status'));
        $qb->setParameter('status', 'approved');

        if ($office) {
            $qb->andWhere($qb->expr()->eq('budget.office', ':office'));
            $qb->setParameter('office', $office);
        }
        if ($financialYear) {
            $qb->andWhere($qb->expr()->eq('financialYear.id', ':finanYear'));
            $qb->setParameter('finanYear', $financialYear);
        }

        if (!empty($type)) {
            $qb->andWhere($qb->expr()->in('budget.type', ':type'));
            $qb->setParameter('type', $type);
        }

        $qb->groupBy('budgetHead.id');

        $data = [];

        if ($row = $qb->getQuery()->getOneOrNullResult()) {
            return $row;
        }

        return !empty($data) ? $data : ['requestAmount' => 0, 'amount' =>  0];
    }

    public function getBudgetAmountByOffice($year, Office $office = null)
    {
        $qb = $this->createQueryBuilder('bd');
        $qb->select("office.id as officeId, SUM(bd.requestAmount) as requestAmount, SUM(bd.amount) as amount");
        $qb->join('bd.budget', 'budget');
        $qb->join('budget.office', 'office');
        $qb->join('budget.financialYear', 'financialYear');
        $qb->join('bd.budgetHead', 'budgetHead');
        $qb->where($qb->expr()->eq('budget.financialYear', ':year'));
        $qb->setParameter('year', $year);
        $qb->addGroupBy('budget.office');

        if ($office) {
            $qb->andWhere($qb->expr()->eq('budget.office', ':office'));
            $qb->setParameter('office', $office);
        }

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['officeId']] = $row;
        }

        return $data;
    }
}