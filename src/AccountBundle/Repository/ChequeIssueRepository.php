<?php

namespace AccountBundle\Repository;

use AccountBundle\Entity\ChequeIssue;
use AccountBundle\Entity\PaymentVoucher;
use AccountBundle\Entity\SanctionPayment;
use AccountBundle\Entity\Voucher;
use AccountBundle\Entity\VoucherDetail;
use AppBundle\Repository\BaseRepository;

/**
 * ChequeIssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChequeIssueRepository extends BaseRepository
{
    public function saveVoucherInformation(ChequeIssue $chequeIssue, $data)
    {
        $this->deleteOldVouchers($chequeIssue);
        foreach ($data['chequeNumber'] as $index => $d) {
            $voucher = new PaymentVoucher();

            $voucher->setSanctions($chequeIssue->getSanctions());

            $bankAccount = $this->_em->getRepository('AccountBundle:BankAccount')->find($data['bankAccount'][$index]);
            $chequeIssue->addVoucher($voucher);

            $voucher->setFundType($chequeIssue->getFundType());
            $voucher->setOffice($chequeIssue->getOffice());
            $voucher->setChequeNumber($data['chequeNumber'][$index]);
            $voucher->setChequeDate($chequeIssue->getChequeDate());
            $voucher->setVoucherDate($chequeIssue->getChequeDate());
            $voucher->setToOrFrom($data['toOrFrom'][$index]);
            $voucher->setAgainst($data['against'][$index]);
            $voucher->setAccount($bankAccount);
            $voucher->setDescription($data['description'][$index]);
            $this->_em->persist($voucher);

            $total = 0;
            foreach ($data['fundHead'] as $fundHeadId => $fundData) {
                $amount = (float)$fundData[$index];

                if ($amount == 0) continue;

                $fundHead = $this->_em->getRepository('AccountBundle:FundHead')->find($fundHeadId);
                $voucherDetail = new VoucherDetail();
                $voucherDetail->setAmount($amount);
                $voucherDetail->setFundHead($fundHead);
                $voucherDetail->setVoucher($voucher);

                $this->_em->persist($voucherDetail);
                $total += $voucherDetail->getAmount();
            }

            $voucher->setAmount($total);
            $this->_em->flush();
        }

        /** @var SanctionPayment $sanction */
        foreach ($chequeIssue->getSanctions() as $sanction) {
            $sanction->setVoucherDate($chequeIssue->getChequeDate());
        }

        $this->_em->flush();
    }

    public function deleteOldVouchers(ChequeIssue $chequeIssue)
    {
        /** @var Voucher $voucher */
        foreach ($chequeIssue->getVouchers() as $voucher) {
            foreach ($voucher->getVoucherDetails() as $vd) {
                $this->_em->remove($vd);
            }
            $this->_em->remove($voucher);
        }
    }

    public function calculateFundHead($data)
    {
        $total = 0;
        foreach ($data['fundHead'] as $fundData) {
            $total += array_sum($fundData);
        }

        return $total;
    }
}