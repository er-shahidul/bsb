<?php

namespace AccountBundle\Repository;

use AccountBundle\Entity\FundType;
use AccountBundle\Entity\PaymentVoucher;
use AccountBundle\Entity\Voucher;
use AppBundle\Entity\Office;
use AppBundle\Utility\DateUtil;

/**
 * PaymentVoucherRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentVoucherRepository extends VoucherRepository
{
    /**
     * @param PaymentVoucher $paymentVoucher
     */
    public function prepareAndSave($paymentVoucher)
    {
        $paymentVoucher->setYear(date('Y'));
        $paymentVoucher->prepareAmount();
        foreach ($paymentVoucher->getVoucherDetails() as $detail) {
            $detail->setVoucher($paymentVoucher);
        }
        $this->save($paymentVoucher);
    }

    public function paymentVoucherStats($fundType, $ignoreVouchers)
    {
        $qb = $this->createQueryBuilder('voucher');
        $qb->join('voucher.voucherDetails', 'vd');
        $qb->join('vd.fundHead', 'fundHead');
        $qb->where('voucher.fundType = :fundType')->setParameter('fundType', $fundType);
        $qb->andWhere('voucher.status = :status')->setParameter('status', 'approved');
        $qb->select('SUM(vd.amount) as amount, fundHead.id as fundHeadId, fundHead.name as fundName');
        $qb->groupBy('fundHead.id, fundHead.name');

        if (count($ignoreVouchers) > 0) {
            $ids = [];
            foreach ($ignoreVouchers as $voucher) {
                $ids[] = $voucher->getId();
            }

            $qb->andWhere($qb->expr()->notIn('voucher', $ids));
        }

        $data = [];
        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['fundHeadId']] = (float)$row['amount'];
        }

        return $data;
    }

    public function getFirstVoucher($fundType, $office)
    {
        $qb = $this->getVoucherQuery([
            'fundType' => $fundType,
            'office' => $office
        ]);

        $qb->andWhere($qb->expr()->isNotNull('voucher.chequeNumber'));

        $qb->orderBy('voucher.voucherDate', 'ASC');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
