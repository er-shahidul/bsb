<?php

namespace AccountBundle\Repository;

use AccountBundle\Entity\BankAccount;
use AccountBundle\Entity\FundType;
use AccountBundle\Entity\Voucher;
use AppBundle\Entity\Office;
use AppBundle\Repository\BaseRepository;
use AppBundle\Utility\DateUtil;

/**
 * VoucherRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoucherRepository extends BaseRepository
{
    public function getNextVoucherNumber(Office $office, FundType $fundType, $year)
    {
        $qb = $this->createQueryBuilder('voucher');
        $qb->select('MAX(voucher.generatedVoucherNumber) as max_number');
        $qb->andWhere($qb->expr()->eq('voucher.office', ':office'));
        $qb->andWhere($qb->expr()->eq('voucher.fundType', ':fundType'));
        $qb->andWhere($qb->expr()->eq('voucher.year', ':year'));

        $qb->setParameters([
            'office' => $office,
            'fundType' => $fundType,
            'year' => $year
        ]);
        $maxNumber = $qb->getQuery()->getSingleScalarResult();

        return (int)$maxNumber+1;
    }

    public function getAllWithoutReconciliationRef(Office $office, FundType $fundType = null)
    {
        $qb = $this->createQueryBuilder('voucher');
        $qb->where($qb->expr()->isNull('voucher.reconciliation'));
        $qb->andWhere($qb->expr()->eq('voucher.office', $office->getId()));
        $qb->andWhere($qb->expr()->eq('voucher.status', ":status"))->setParameter('status', 'approved');
        $qb->andWhere($qb->expr()->eq('voucher.reconciled', ':reconciled'))->setParameter('reconciled', false);
        $qb->andWhere('1=1');

        if ($fundType) {
            $qb->andWhere($qb->expr()->eq('voucher.fundType', $fundType->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function getVouchers($params)
    {
        $qb = $this->getVoucherQuery($params);

        return $qb->getQuery()->getResult();
    }

    public function getVoucherTotal($params, $totalBy = 'fundHead')
    {
        $qb = $this->getVoucherQuery($params);

        if ($totalBy == 'fundHead') {
            $qb->select('fundHead.id, SUM(voucherDetails.amount) as amount');

            $qb->groupBy('fundHead.id');
        } else if ($totalBy == 'grandTotal') {
            $qb->select('SUM(voucherDetails.amount) as amount');

            return (float)$qb->getQuery()->getSingleScalarResult();
        }

        $data = [];

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['id']] = $row['amount'];
        }

        return $data;
    }

    /**
     * Example
     * @param $params array [
     *      duration    => array
     *              start   => \DateTime
     *              end     => \DateTime
     *      office      => Office
     *      fundType    => FundType
     *      bankAccount => BankAccount
     *      isReconciled => bool
     * ]
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getVoucherQuery($params)
    {
        $qb = $this->createQueryBuilder('voucher');
        $qb->join('voucher.voucherDetails', 'voucherDetails');
        $qb->join('voucherDetails.fundHead', 'fundHead');
        $qb->andWhere('voucher.status = :status')->setParameter('status', 'approved');

        if (isset($params['duration']['start'])) {
            $qb->andWhere($qb->expr()->gte('voucher.voucherDate', ':startDate'));
            $qb->setParameter('startDate', $params['duration']['start']);
        }

        if (isset($params['duration']['end'])) {
            $qb->andWhere($qb->expr()->lte('voucher.voucherDate', ':endDate'));
            $qb->setParameter('endDate', $params['duration']['end']);
        }

        if (isset($params['office']) && $params['office'] instanceof Office) {
            $qb->andWhere($qb->expr()->eq('voucher.office', ':office'));
            $qb->setParameter('office', $params['office']);
        }

        if (isset($params['fundType']) && $params['fundType'] instanceof FundType) {
            $qb->andWhere($qb->expr()->eq('voucher.fundType', ':fundType'));
            $qb->setParameter('fundType', $params['fundType']);
        }

        if (isset($params['bankAccount']) && $params['bankAccount'] instanceof BankAccount) {
            $qb->andWhere($qb->expr()->eq('voucher.account', ':bankAccount'));
            $qb->setParameter('bankAccount', $params['bankAccount']);
        }

        if (isset($params['isReconciled']) && is_bool($params['isReconciled'])) {
            $qb->andWhere('voucher.reconciled = :reconciled')->setParameter('reconciled', $params['isReconciled']);
        }

        if (isset($params['isDebited']) && is_bool($params['isDebited'])) {
            $qb->andWhere('voucher.debited = :debited')->setParameter('debited', $params['isDebited']);
        }

        if (isset($params['voucherNumberIsNull'])) {
            $qb->andWhere($qb->expr()->isNull('voucher.voucherNumber'));
        }

        if (isset($params['voucherNumberIsNotNull'])) {
            $qb->andWhere($qb->expr()->isNotNull('voucher.voucherNumber'));
        }

        return $qb;
    }

    public function getNonReconciledVouchers($params)
    {
        $qb = $this->getVoucherQuery($params);

        $qb->orWhere('
            voucher.status = :status 
            AND voucher.reconciled = :or_reconciled 
            AND voucher.reconciliationDate > :reconciledDate
            AND voucher.office = :office
            AND voucher.account = :bankAccount');

        $qb->setParameter('or_reconciled', true);
        $qb->setParameter('reconciledDate', $params['reconciledDuration']['start']);

        return $qb->getQuery()->getResult();
    }

    public function setVoucherNumber(Voucher $voucher, $prefix)
    {
        $nexVoucherNumber = $this->getNextVoucherNumber($voucher->getOffice(), $voucher->getFundType(), $voucher->getVoucherDate()->format('Y'));
        $voucher->setVoucherNumber($voucher->formatVoucherNumber($nexVoucherNumber, $prefix));
        $voucher->setGeneratedVoucherNumber($nexVoucherNumber);
    }

    public function generateVoucherNumber(Office $office, FundType $fundType, $year, $month)
    {
        $qb = $this->getVoucherQuery([
            'fundType' => $fundType,
            'duration' => DateUtil::getMonthDateRange($year, $month)
        ]);
        $qb->orderBy('voucher.createdAt', 'asc');
        $vouchers = $qb->getQuery()->getResult();

        $nexVoucherNumber = $this->getNextVoucherNumber($office, $fundType, $year);

        /** @var Voucher $voucher */
        foreach ($vouchers as $voucher) {
            $prefix = $voucher->voucherType() == 'payment' ? 'PV' : 'RV';
            $voucher->setVoucherNumber($voucher->formatVoucherNumber($nexVoucherNumber, $prefix));
            $voucher->setGeneratedVoucherNumber($nexVoucherNumber);
            $nexVoucherNumber++;
        }

        $this->_em->flush();
    }

    public function f(Office $office, FundType $fundType, $year, $month)
    {
        $qb = $this->getVoucherQuery([
            'fundType' => $fundType,
            'duration' => DateUtil::getMonthDateRange($year, $month)
        ]);
        $qb->orderBy('voucher.createdAt', 'asc');
        $vouchers = $qb->getQuery()->getResult();

        $nexVoucherNumber = $this->getNextVoucherNumber($office, $fundType, $year);

        /** @var Voucher $voucher */
        foreach ($vouchers as $voucher) {
            $prefix = $voucher->voucherType() == 'payment' ? 'PV' : 'RV';
            $voucher->setVoucherNumber($voucher->formatVoucherNumber($nexVoucherNumber, $prefix));
            $voucher->setGeneratedVoucherNumber($nexVoucherNumber);
            $nexVoucherNumber++;
        }
    }
}